{
	var attachable_id =   "<%=@attach_to[:ids].first%>";
	var context_title = "<%=j Comments::Comment.human_attribute_name(:context) %>";
	var successMessage = "<%= t('.create.success_message') %>";
	var errorsMessage = "<%= t('.create.errors_message') %>";

	<%if @with_context.to_s =='create_with_context'%>
		 var context_ids = <%=raw @contexts.map{ |c| c.id.to_s }.to_json%>;
		 var context_labels = <%=raw @contexts.map(&:name).to_json%>;
		 var context_hidden = false;
	<% else %>
		var context_ids = [];
		var context_labels = [];
		var context_hidden = true;
	<% end %>
		context_ids.push(' ');
		context_labels.push("<%=t('.create.no_context')%>");
	main_element.find(`.create_file`).alpaca({
			"schema": {
					"title": "<%=j t('.create.load_file')%>",
					"type": "object",
							"properties":{
								"context_id":{
									"title": context_title,
									"enum": context_ids,
									"required": true,
									"default": ' '
								},
								"description": {
									"required": true,
									"title": description_title
								},
								"file": {
									"type": "string",
									"format": "uri"
								 },
								"attachable_type":{
									"default": attachable_type
								},
								"attachable_id":{
									"default": attachable_id
								}
							}
			},
			"options":{
				"focus": "",
				"hideInitValidationError":true,
						"fields":{
							"file": {
								"type": "file",
							},
							"description":{
								"type": "textarea",
								"rows": 5,
								"label": "",
								"wordlimit": 250,

							},
							"attachable_type":{
								"type": "hidden"
							},
							"attachable_id":{
								"type": "hidden"
							},
							"context_id":{
								"type":"select",
								"optionLabels": context_labels,
								"hidden": context_hidden
							}

				},
				"form": {
							"attributes": {
									"method": "post",
									"action": "/comments/files/create"
							},
							"buttons": {
									"submit": {
											"title": "<%= t 'buttons.save'%>",
											"fieldClass": "sss",
											"click": function(e) {
												return;
												var promise = this.ajaxSubmit();
												var elem = main_element.find("#messages");
												elem.empty();
												promise.done(function() {
													elem.html('<div class="alert alert-success" id="success_div"></div>');
													elem.find("#success_div").text(successMessage);
													form.getControlByPath('description').getControlEl().val('');
												});
												promise.fail(function(arg) {
													elem.html('<div class="alert alert-danger" id="errors_div"></div>');
													elem.find("#errors_div").text(errorsMessage);
												});
												promise.always(function() {
														pageClick(1);
												});
											}
									}
							}
					}
			},
			"postRender": function(control) {
				form = control;
				apply_select();
				main_element.find('.create_file').fileupload({
					url: "/comments/files/create",
					format: 'json',
					sequentialUploads: true,
					singleFileUploads: true,
					add: function (e, data) {
						submit_button().off('click');
						submit_button().click(function(){
							var promise = data.submit();
							var elem = main_element.find("#messages");
							elem.empty();
							promise.done(function() {
								elem.html('<div class="alert alert-success" id="success_div"></div>');
								elem.find("#success_div").text(successMessage);
								form.getControlByPath('description').getControlEl().val('');
							});
							promise.fail(function(arg) {
								elem.html('<div class="alert alert-danger" id="errors_div"></div>');
								elem.find("#errors_div").text(errorsMessage);
							});
							promise.always(function() {
									pageClick(1);
							});
							return false;
						});
					},
					replaceFileInput:false
				});
			}
	});
}
