- def_icon = {'icon'=>'fas fa-exclamation-triangle', 'color'=>'color-regular'}

a href='/jobstat/account/list/index'
  = t('.return')
br
- id=@job[:drms_job_id]
h3 = t('.job_info', id: id)

div class="row"
  div class="col-md-4"
    h3 = t('.common')
    table class="table table-bordered table-striped"
      tr
        td
          = t('.supercomputer')
        td
          = @job[:cluster]
      tr
        td
          =t('.job_id')
        td
          = id
      tr
        td
          = t('.login')
        td
          = @job[:login]
      tr
        td
          =t('.status')
        td
          = @job[:state]
      tr
        td
          = t('.partition')
        td
          = @job[:partition]
      tr
        td
          =t('.cores')
        td
          = @job[:num_cores]
      tr
        td
          =t('.nodes')
        td
          = @job[:num_nodes]
      tr
        td
          =t('.queued')
        td
          = @job[:submit_time].strftime("%F %T (%Z)")
      tr
        td
          =t('.start')
        td
          = @job[:start_time].strftime("%F %T (%Z)")
      tr
        td
          =t('.end')
        td
          = @job[:end_time].strftime("%F %T (%Z)")
      tr
        td
          =t('.time')
        td
          = number_with_precision(@job.get_duration_hours, :precision => 1)
      tr
        td
          =t('.nodes')
        td
          = @job[:nodelist].gsub(',',', ')

  div class="col-md-4"
    //fixme! translate
    h3 = t('.perf')
    table class="table table-bordered table-striped"
      tr style="font-weight:bold"
        td
          =t('.metric')
        td
          =t('.value')
        td
          =t('.estimation')
      tr
        td
          =t('.cpu_avg')
        td
          = format_float_or_nil(@job_perf[:cpu_user])
        td class="job_metric_#{@ranking[:cpu_user]}"
          = @ranking[:cpu_user]
      tr
        td
          == t('.avg', link: link_to("LoadAVG", "https://en.wikipedia.org/wiki/Load_(computing)"))
        td
          = format_float_or_nil(@job_perf[:loadavg])
        td class="job_metric_#{@ranking[:loadavg]}"
          = @ranking[:loadavg]
      tr
        td
          =t('.gpu_avg')
        td
          = format_float_or_nil(@job_perf[:gpu_load])
        td class="job_metric_#{@ranking[:gpu_load]}"
          = @ranking[:gpu_load]
      tr
        td
          =t('.mpi')
        td
          = format_float_or_nil(@job_perf[:ib_rcv_data_mpi])
        td class="job_metric_#{@ranking[:ib_rcv_data_mpi]}"
          = @ranking[:ib_rcv_data_mpi]
      tr
        td
          =t('.fs_read')
        td
          = format_float_or_nil(@job_perf[:ib_rcv_data_fs])
        td class="job_metric_#{@ranking[:ib_rcv_data_fs]}"
          = @ranking[:ib_rcv_data_fs]
      tr
        td
          =t('.fs_write')
        td
          = format_float_or_nil(@job_perf[:ib_xmit_data_fs])
        td class="job_metric_#{@ranking[:ib_xmit_data_fs]}"
          = @ranking[:ib_xmit_data_fs]

  div class="col-md-4"
    h3 = t('.base')
    table class="table table-bordered table-striped"
      - if @job.get_classes.length > 0
        - @job.get_classes.each do |cond|
          tr
            td
              = cond['description']
      - else
        tr
          td
            = t('.no_strange')

p
  =t('.command_line', line: raw(@job[:command]))

br

h3 = t('.potential')

p =t('.descr1')
p =t('.descr2')

table class="table table-bordered table-striped"
  tr
    th
      =t('.type')
    th
      =t('.description')
    th
      =t('.suggestion')
    th
      =t('.recomendation')

  - rules=@job.get_rules(@current_user)
  - if rules.length > 0
    - rules.each do |cond|
      - cond_name=cond['name']
      tr style=("background-color: #ffcccc;" if cond['group']=='disaster')
        td
          table
            tr
              td style="text-align: center"
                // rule icon
                - icon = @rules_plus['groups'].fetch(cond['group'],def_icon)
                i class="fa-fw align-left inline #{icon['icon']} #{icon['color']}"
              td style="text-align: center"
                // current feedback icon
                - fb = @feedbacks.select{|x| x['condition']==cond_name}[0] || {}
                - flag_index = fb.fetch('klass',99)
                i id="af-#{id}-#{cond}" class="#{@agree_flags[flag_index]}" title=("#{t('.no_feedback_yet')}" if flag_index==99)
                |&nbsp;
            tr class='spacer'
              td
                p
            tr
              td style="text-align: center"
                // "why hide?" dialog
                - tint = @filters.any?{|x|x==cond_name} ? "tinted" : ""
                button id="btn-hide-#{cond_name}" class="btn-danger #{tint}" onClick="all_pre_hide_rule('#{cond_name}');$('#text_hide_rule_#{cond_name}').focus();" title="#{t('jobstat.common.hide_show')}"
                  i class="fa-fw far fa-bell-slash"
                div class="octo-popup content" id="hide_rule_#{cond_name}"
                  form onSubmit="all_hide_rule('#{cond_name}',false); return false;"
                    div class="centered x-white"
                      = t('jobstat.common.why_hide')
                    input type="text" id="text_hide_rule_#{cond_name}" class="fullwidth" style="display: block"
                    div class="centered x-white"
                      button class="btn-info" type="submit"
                        = t('jobstat.common.hide')
                      button onClick="$('#hide_rule_#{cond_name}').removeClass('target'); return false;"
                        = t('jobstat.common.not_hide')
                a class="octo-close-popup" onClick="$('#hide_rule_#{cond_name}').removeClass('target'); return false"
                | &nbsp;
              td style="text-align: center"
                // "I disagree with rule" button
                button class="btn-warning disagree-button" onClick="popup_show('disagree#{id}_#{cond_name}','question_#{id}_#{cond_name}');" title="Не согласен!"
                  i class="#{@agree_flags[1]}"
                  /"far fa-angry"
                |&nbsp;
                // "Disagree" dialog
                div class="octo-popup container" id="popup_disagree#{id}_#{cond_name}"
                  form onSubmit="popup_hide('disagree#{id}_#{cond_name}');disagree('#{id}','#{cond_name}',0); return false;"
                    div class="centered"
                      = t('jobstat.common.why_dont_agree')
                    input type="text" id="question_#{id}_#{cond_name}" class="fullwidth"
                    div class="centered"
                      button class="btn-info" type="submit"
                        = t('jobstat.common.send')
                      button class="btn-info" onClick="return popup_hide('disagree#{id}_#{cond_name}')"
                        = t('jobstat.common.not_send')
                a class="octo-close-popup" onClick="return popup_hide('disagree#{id}_#{cond_name}')"
              td style="text-align: center"
                button class="btn-warning" onClick="popup_show('agree#{id}_#{cond_name}','question_#{id}_#{cond_name}');" title="#{t('jobstat.common.agree_button')}"
                  i class="#{@agree_flags[0]}"
                |&nbsp;
                // 'Agree' dialog
                div class="octo-popup container" id="popup_agree#{id}_#{cond_name}"
                  form onSubmit="popup_hide('agree#{id}_#{cond_name}'); agree('#{id}','#{cond_name}',0,''); return false;"
                    div class="centered"
                      button class="btn-info" type="submit"
                        = t('jobstat.common.agree_rule')
                      button class="btn-info" onClick="return popup_hide('agree#{id}_#{cond_name}')"
                        = t('jobstat.common.not_send')
                a class="octo-close-popup2" onClick="return popup_hide('agree#{id}_#{cond_name}')"

        td
          strong class="hidden_name" style="display: none;"
            = "id: "
            = cond['name']
          = cond['description']
        td
          = cond['suggestion']
        td
          = cond['text_recommendation']
  - else
    tr
      td colspan="4"
        = t('.no_problems')

br

h3 = t('.dynamics')

p = link_to(t('.details'), "https://graphit.parallel.ru:5001/jd/share/" + (@job[:drms_job_id]*2+1).to_s.reverse.to_i.to_s(36))

div class="row"
  div class="col-md-4" style="height: 250px"
    h4 = t('.cpu_percent')
    div id="g_cpu"
  div class="col-md-4" style="height: 250px"
    h4
      == link_to t('jobstat.common.la'), "https://en.wikipedia.org/wiki/Load_(computing)"
    div id="g_loadavg"
  div class="col-md-4" style="height: 250px"
    h4 = t('.mpi')
    div id="g_ib_mpi"

div class="row"
  div class="col-md-4" style="height: 250px"
    h4 = t('.gpu_percent')
    div id="g_gpu"
  div class="col-md-4" style="height: 250px"
    p
  div class="col-md-4" style="height: 250px"
    h4 = t('.fs')
    div id="g_ib_fs"

script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"

javascript:

  var filters=#{{@filters.to_json}}
  var current_user=#{{@current_user.id}};
  var jobs=#{{@jobs_plus.to_json}};
  var jobs_feedback=#{{@jobs_feedback.to_json}};
  var feedback_url='#{{url_for ["account_list","feedback"]}}';
  var agree_flags=#{{@agree_flags.to_json}};

  function DrawSingleGraph(target, sensor_data, max)
  {
    for(var i = 0; i < sensor_data.length; i++)
      sensor_data[i][0] = new Date(sensor_data[i][0]*1000);

    var data = new google.visualization.DataTable();
    data.addColumn('date', "#{{t('.time')}}" );
    data.addColumn('number', "#{{t('.value')}}");

    data.addRows(sensor_data);

    var options = {
      hAxis: {
        title: "#{{t('.time')}}",
        format: 'HH:mm',
      },
      vAxis: {
        minValue: 0
      },
      colors: ['#8080ff'],
      chartArea: {'width': '85%'},
      legend: {'position': 'none'},
    };

    if(max) options.vAxis.maxValue = max;

    var chart = new google.visualization.LineChart(document.getElementById(target));
    chart.draw(data, options);
  }

  function DrawSendRecvGraph(target, sensor_data)
  {
    for(var i = 0; i < sensor_data.length; i++)
    {
      sensor_data[i][0] = new Date(sensor_data[i][0]*1000);
      sensor_data[i][1] /= 1024 * 1024;
      sensor_data[i][2] /= 1024 * 1024;
    }

    var data = new google.visualization.DataTable();
    data.addColumn('date', '#{{t('.time')}}');
    data.addColumn('number', '#{{t('.sent')}}');
    data.addColumn('number', '#{{t('.received')}}');

    data.addRows(sensor_data);

    var options = {
      hAxis: {
        title: '#{{t('.time')}}',
        format: 'HH:mm'
      },
      vAxis: {
        minValue: 0,
        format: "short"
      },
      colors: ['#8080ff', '#ff8080'],
      chartArea: {'width': '80%', 'top' : '10%', 'bottom': '20%'},
      legend: {'position': 'bottom'},
    };

    var chart = new google.visualization.LineChart(document.getElementById(target));
    chart.draw(data, options);
  }

  function DrawGraphs()
  {
     DrawSingleGraph("g_cpu",  #{{ raw @cpu_digest_data.to_json }} , 100);
     DrawSingleGraph("g_gpu",  #{{ raw @gpu_digest_data.to_json }} , 100);
     DrawSingleGraph("g_loadavg",  #{{ raw @loadavg_digest_data.to_json }} );
     DrawSendRecvGraph("g_ib_mpi",  #{{ raw @mpi_digest_data.to_json }} );
     DrawSendRecvGraph("g_ib_fs",  #{{ raw @fs_digest_data.to_json }} );

  }

  $(document).ready(function(){
    google.charts.load('current', {packages: ['corechart', 'line']});
    google.charts.setOnLoadCallback(DrawGraphs);

    document.onkeyup=function(e) {
      if (e.ctrlKey && e.which == 89){
        $(".hidden_name").css('display','block')
      }
    };
    
  });

